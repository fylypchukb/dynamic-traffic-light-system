// <auto-generated />
using System;
using DynamicTrafficLightServer.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DynamicTrafficLightServer.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20241229184725_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DynamicTrafficLightServer.Models.Configuration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedById")
                        .HasColumnType("int");

                    b.Property<int>("DefaultGreenTime")
                        .HasColumnType("int");

                    b.Property<int>("DefaultRedTime")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastUpdateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("LastUpdatedById")
                        .HasColumnType("int");

                    b.Property<int>("MaxGreenTime")
                        .HasColumnType("int");

                    b.Property<int>("MinGreenTime")
                        .HasColumnType("int");

                    b.Property<string>("SequenceGreenTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TimePerVehicle")
                        .HasColumnType("int");

                    b.Property<int>("TrafficLightId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("LastUpdatedById");

                    b.HasIndex("TrafficLightId");

                    b.ToTable("Configurations");
                });

            modelBuilder.Entity("DynamicTrafficLightServer.Models.Intersection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedById")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastUpdateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("LastUpdatedById")
                        .HasColumnType("int");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("LastUpdatedById");

                    b.ToTable("Intersections");
                });

            modelBuilder.Entity("DynamicTrafficLightServer.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("DynamicTrafficLightServer.Models.TrafficLight", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedById")
                        .HasColumnType("int");

                    b.Property<int>("IntersectionId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastUpdateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("LastUpdatedById")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("IntersectionId");

                    b.HasIndex("LastUpdatedById");

                    b.ToTable("TrafficLights");
                });

            modelBuilder.Entity("DynamicTrafficLightServer.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AuthIdentityId")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AuthIdentityId")
                        .IsUnique();

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("DynamicTrafficLightServer.Models.Configuration", b =>
                {
                    b.HasOne("DynamicTrafficLightServer.Models.User", "CreatedBy")
                        .WithMany("CreatedConfigurations")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DynamicTrafficLightServer.Models.User", "LastUpdatedBy")
                        .WithMany("LastUpdateConfigurations")
                        .HasForeignKey("LastUpdatedById")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DynamicTrafficLightServer.Models.TrafficLight", "TrafficLight")
                        .WithMany("Configurations")
                        .HasForeignKey("TrafficLightId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("LastUpdatedBy");

                    b.Navigation("TrafficLight");
                });

            modelBuilder.Entity("DynamicTrafficLightServer.Models.Intersection", b =>
                {
                    b.HasOne("DynamicTrafficLightServer.Models.User", "CreatedBy")
                        .WithMany("CreatedIntersections")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DynamicTrafficLightServer.Models.User", "LastUpdatedBy")
                        .WithMany("LastUpdatedIntersections")
                        .HasForeignKey("LastUpdatedById")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("LastUpdatedBy");
                });

            modelBuilder.Entity("DynamicTrafficLightServer.Models.TrafficLight", b =>
                {
                    b.HasOne("DynamicTrafficLightServer.Models.User", "CreatedBy")
                        .WithMany("CreatedTrafficLights")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DynamicTrafficLightServer.Models.Intersection", "Intersection")
                        .WithMany("TrafficLights")
                        .HasForeignKey("IntersectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DynamicTrafficLightServer.Models.User", "LastUpdatedBy")
                        .WithMany("LastUpdatedTrafficLights")
                        .HasForeignKey("LastUpdatedById")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("Intersection");

                    b.Navigation("LastUpdatedBy");
                });

            modelBuilder.Entity("DynamicTrafficLightServer.Models.User", b =>
                {
                    b.HasOne("DynamicTrafficLightServer.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("DynamicTrafficLightServer.Models.Intersection", b =>
                {
                    b.Navigation("TrafficLights");
                });

            modelBuilder.Entity("DynamicTrafficLightServer.Models.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("DynamicTrafficLightServer.Models.TrafficLight", b =>
                {
                    b.Navigation("Configurations");
                });

            modelBuilder.Entity("DynamicTrafficLightServer.Models.User", b =>
                {
                    b.Navigation("CreatedConfigurations");

                    b.Navigation("CreatedIntersections");

                    b.Navigation("CreatedTrafficLights");

                    b.Navigation("LastUpdateConfigurations");

                    b.Navigation("LastUpdatedIntersections");

                    b.Navigation("LastUpdatedTrafficLights");
                });
#pragma warning restore 612, 618
        }
    }
}
